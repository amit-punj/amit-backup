<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Validator;
use URL;
use Session;
use Redirect;
use App\User;
use App\Properties;
use App\Meters;
use App\Contracts;
use App\PropertiesUnit;
use App\Vendors;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
class PropertyController extends Controller {   

    const Property_Manager = 3;
    const Property_Description_Experts = 4;
    const Legal_Advisor = 5;
    const Visit_Organizer = 6;
    public function __construct(){
        $this->middleware('auth');
    }

    //Create Unit Page
    public function index(){
        $amenities = DB::table('amenities')->get();
        $PropertyManagers = DB::table('users')->where('user_role', self::Property_Manager)->get();
        $PropertyDescriptionExperts = DB::table('users')->where('user_role', self::Property_Description_Experts)->get();
        $LegalAdvisors = DB::table('users')->where('user_role', self::Legal_Advisor)->get();
        $VisitOrganizers = DB::table('users')->where('user_role', self::Visit_Organizer)->get();
        $properties = DB::table('properties')->where('user_id', \Auth::user()->id)->get();
        return view('dashboard.createproperty',
            compact('PropertyManagers','PropertyDescriptionExperts','LegalAdvisors','VisitOrganizers','amenities','properties')
        ); 
    }

    //Create unit post function
    public function createProperty(Request $request){
        if($request->input('p_type') == 'unit'){
            $request->validate([
                //step 1
                'p_type' => ['required'],

                //step 2
                'unit_name' => ['required'],
                'area' => ['required','numeric'],
                'description' => ['required'],
                'address' => ['required'],

                //step 3
                'u_type' => ['required'],
                'rent' => ['required','numeric'],
                'cost_provision' => ['required','numeric'],
                'deposit' => ['required','numeric'],
                'bedrooms' => ['required','numeric'],
                'bed_funished' => ['required'],
                'kitchen' => ['required'],
                'toilet' => ['required'],

                //step 4
                'min_age' => ['required','numeric'],
                'max_age' => ['required','numeric'],
                
                //step 7
                'cover_image' => ['required'],
                'images' => ['required'],
            ]);

            // create unit
            $propertiesUnit = new PropertiesUnit;
            $propertiesUnit->building_id = $request->input('building_id');
            $propertiesUnit->unit_name = $request->input('unit_name');
            $propertiesUnit->area = $request->input('area');
            $propertiesUnit->description = $request->input('description');
            $propertiesUnit->latitude = $request->input('latitude');
            $propertiesUnit->longitude = $request->input('longitude');
            $propertiesUnit->address = $request->input('address');
            $propertiesUnit->u_type = $request->input('u_type');
            $propertiesUnit->rent = $request->input('rent');
            $propertiesUnit->cost_provision = $request->input('cost_provision');
            $propertiesUnit->deposit = $request->input('deposit');
            $propertiesUnit->bedrooms = $request->input('bedrooms');
            $propertiesUnit->bed_funished = $request->input('bed_funished');
            $propertiesUnit->bed_lock = $request->input('bed_lock');
            $propertiesUnit->kitchen = $request->input('kitchen');
            $propertiesUnit->toilet = $request->input('toilet');
            $propertiesUnit->living_room = $request->input('living_room');
            $propertiesUnit->balcony_terrace = $request->input('balcony_terrace');
            $propertiesUnit->garden = $request->input('garden');
            $propertiesUnit->basement = $request->input('basement');
            $propertiesUnit->parking = $request->input('parking');
            $propertiesUnit->wheelchair = $request->input('wheelchair');
            $propertiesUnit->allergy_friendly = $request->input('allergy_friendly');

            if($request->input('amenities') != ''){
                $propertiesUnit->amenities = implode(",",$request->input('amenities'));
            }

            $propertiesUnit->preferred_gender = $request->input('preferred_gender');
            $propertiesUnit->min_age = $request->input('min_age');
            $propertiesUnit->max_age = $request->input('max_age');
            $propertiesUnit->tenant_type = $request->input('tenant_type');
            $propertiesUnit->couples_allowed = $request->input('couples_allowed');
            $propertiesUnit->p_type = $request->input('p_type');
            
            $propertiesUnit->user_id = \Auth::user()->id;

            if($request->input('property_manager_id') == ''){
                $propertiesUnit->property_manager_id = \Auth::user()->id;
            } else {
               $propertiesUnit->property_manager_id = $request->input('property_manager_id');
            }
            if($request->input('property_description_experts_id') == ''){
                $propertiesUnit->property_description_experts_id = \Auth::user()->id;
            } else {
               $propertiesUnit->property_description_experts_id = $request->input('property_description_experts_id');
            }
            if($request->input('property_legal_advisor_id') == ''){
                $propertiesUnit->property_legal_advisor_id = \Auth::user()->id;
            } else {
               $propertiesUnit->property_legal_advisor_id = $request->input('property_legal_advisor_id');
            }
            if($request->input('property_visit_organizer_id') == ''){
                $propertiesUnit->property_visit_organizer_id = \Auth::user()->id;
            } else {
                $propertiesUnit->property_visit_organizer_id = $request->input('property_visit_organizer_id');
            }
            
            $propertiesUnit->registration_possible = $request->input('registration_possible');
            $propertiesUnit->cleaning_commonc_room_incl = $request->input('cleaning_commonc_room_incl');
            $propertiesUnit->cleaning_private_room_incl = $request->input('cleaning_private_room_incl');
            $propertiesUnit->animal_allowed = $request->input('animal_allowed');
            $propertiesUnit->play_musical_instrument = $request->input('play_musical_instrument');
            $propertiesUnit->smoking_allowed = $request->input('smoking_allowed');
            $propertiesUnit->cover_image = $request->input('cover_image');
            $propertiesUnit->images = $request->input('images');
            $propertiesUnit->save();

            //Add Vandors
            if($request->input('vandor_data') != ''){
                $vandors = explode("],", $request->input('vandor_data'));
                foreach ($vandors as $key => $vandor) {
                    $data = json_decode($vandor."]", true);
                    if(is_array($data) == 1){
                        $propertiesVendor = new Vendors;
                        $propertiesVendor->user_id = \Auth::user()->id;
                        $propertiesVendor->property_unit_id = $propertiesUnit->id;
                        foreach ($data as $key => $value) {
                            if($value['name'] == 'vendor_type'){
                                $propertiesVendor->vendor_type = $value['value'];
                            }
                            if($value['name'] == 'vendor_name'){
                                $propertiesVendor->name = $value['value'];
                            }
                            if($value['name'] == 'vendor_phone_no'){
                                $propertiesVendor->phone_no = $value['value'];
                            }
                            if($value['name'] == 'vendor_email'){
                                $propertiesVendor->email = $value['value'];
                            }
                        }
                        $propertiesVendor->save();
                    }
                }
            }

            //Add Meter
            if($request->input('new_meter') != ''){
                $meters = explode("],", $request->input('new_meter'));
                foreach ($meters as $key => $vandor) {
                    $data = json_decode($vandor."]", true);
                    if(is_array($data) == 1){
                        $Meter = new Meters;
                        $Meter->unit_id = $propertiesUnit->id;
                        $Meter->user_id = \Auth::user()->id;
                        foreach ($data as $key => $value) {
                            if($value['name'] == 'meter_type'){
                                $Meter->meter_type = $value['value'];
                            }
                            if($value['name'] == 'meter_number'){
                                $Meter->meter_number = $value['value'];
                            }
                            if($value['name'] == 'ean_number'){
                                $Meter->ean_number = $value['value'];
                            }
                            if($value['name'] == 'unit_price'){
                                $Meter->unit_price = $value['value'];
                            }
                        }
                    }
                    $Meter->save();
                }
            }

            // $this->sendMail([
            //     "Property Manager" => $propertiesUnit->property_manager_id, 
            //     "Property Description Experts" =>$propertiesUnit->property_description_experts_id, 
            //     "Property Legal Advisor" => $propertiesUnit->property_legal_advisor_id,  
            //     "Property Visit Organizer" => $propertiesUnit->property_visit_organizer_id
            // ]);
            return redirect()->back()->with('message', 'Unit Created Successfully!');
        }
        if($request->input('p_type') == 'building'){
            $request->validate([
                //step 1
                'p_type' => ['required'],

                //step 2
                'unit_name' => ['required'],
                'area' => ['required','numeric'],
                'description' => ['required'],
                'address' => ['required'],

                //step 7
                'cover_image' => ['required'],
                'images' => ['required'],
            ]);
            /*  Create Property */
            $property = new Properties;
            $property->user_id = \Auth::user()->id;
            $property->p_type = $request->input('p_type');
            $property->unit_name = $request->input('unit_name');
            $property->area = $request->input('area');
            $property->description = $request->input('description');
            $property->latitude = $request->input('latitude');
            $property->longitude = $request->input('longitude');
            $property->address = $request->input('address');

            
            if($request->input('property_manager_id') == ''){
                $property->property_manager_id = \Auth::user()->id;
            } else {
               $property->property_manager_id = $request->input('property_manager_id');
            }
            if($request->input('property_description_experts_id') == ''){
                $property->property_description_experts_id = \Auth::user()->id;
            } else {
               $property->property_description_experts_id = $request->input('property_description_experts_id');
            }
            if($request->input('property_legal_advisor_id') == ''){
                $property->property_legal_advisor_id = \Auth::user()->id;
            } else {
               $property->property_legal_advisor_id = $request->input('property_legal_advisor_id');
            }
            if($request->input('property_visit_organizer_id') == ''){
                $property->property_visit_organizer_id = \Auth::user()->id;
            } else {
                $property->property_visit_organizer_id = $request->input('property_visit_organizer_id');
            }
            
            $property->registration_possible = $request->input('registration_possible');
            $property->cleaning_commonc_room_incl = $request->input('cleaning_commonc_room_incl');
            $property->cleaning_private_room_incl = $request->input('cleaning_private_room_incl');
            $property->animal_allowed = $request->input('animal_allowed');
            $property->play_musical_instrument = $request->input('play_musical_instrument');
            $property->smoking_allowed = $request->input('smoking_allowed');
            $property->cover_image = $request->input('cover_image');
            $property->images = $request->input('images');
            $property->save();

            //Add Vandors
            if($request->input('vandor_data') != ''){
                $vandors = explode("],", $request->input('vandor_data'));
                foreach ($vandors as $key => $vandor) {
                    $data = json_decode($vandor."]", true);
                    if(is_array($data) == 1){
                        $propertiesVendor = new Vendors;
                        $propertiesVendor->user_id = \Auth::user()->id;
                        $propertiesVendor->property_unit_id = $property->id;
                        foreach ($data as $key => $value) {
                            if($value['name'] == 'vendor_type'){
                                $propertiesVendor->vendor_type = $value['value'];
                            }
                            if($value['name'] == 'vendor_name'){
                                $propertiesVendor->name = $value['value'];
                            }
                            if($value['name'] == 'vendor_phone_no'){
                                $propertiesVendor->phone_no = $value['value'];
                            }
                            if($value['name'] == 'vendor_email'){
                                $propertiesVendor->email = $value['value'];
                            }
                        }
                        $propertiesVendor->save();
                    }
                }
            }
            return redirect()->back()->with('message', 'Building Created Successfully!');
        }
    }

    //Dashboard List unit page 
    public function listUnit(){
        $propertiesWithBuilding = array();
        $ids = null;
        $propertiesWithoutBuilding = DB::table('property_units')
                            ->where('user_id', \Auth::user()->id)
                            ->where('building_id', null)
                            ->get();
        $buildingIds = DB::table('properties')
                            ->select('id')
                            ->where('user_id', \Auth::user()->id)
                            ->get();
        foreach ($buildingIds as $key => $value) {
            if($value->id != null){
                $ids[] = $value->id;
            }
        }
        if($ids != null){
            foreach ($ids as $key => $value) {
                $propertiesWithBuilding[$key]['building_id'] =  $value;
                $propertiesWithBuilding[$key]['data'] = DB::table('property_units')
                        ->where('building_id',$value)
                        ->get();
            }
        }
        return view('dashboard.listunits')->with([
            'propertiesWithoutBuilding' => $propertiesWithoutBuilding,
            'propertiesWithBuilding' => $propertiesWithBuilding
        ]);
    }

    //Dashboard Building Details Page
    public function buildingDetails($id){
        $buildingDetail = DB::table('properties')
                            ->where('id', $id)
                            ->first();
        $buildingUnits = DB::table('property_units')
                            ->where('building_id', $id)
                            ->get();
        $amenities = DB::table('amenities')->get();
        $properties = new Properties;
        $propertyManager = $properties->buildingPropertyManager($id);
        $propertyDescriptionExperts = $properties->buildingPropertyDescriptionExperts($id);
        $propertyLegalAdvisor = $properties->buildingPropertyLegalAdvisor($id);
        $propertyVisitOrganizer = $properties->buildingPropertyVisitOrganizer($id);
        return view('dashboard.buildingdetails')->with([
            'buildingDetail'=>$buildingDetail, 
            'buildingUnits' => $buildingUnits, 
            'amenities'=>$amenities,
            'propertyManager'=>$propertyManager,
            'propertyDescriptionExperts'=>$propertyDescriptionExperts,
            'propertyLegalAdvisor'=>$propertyLegalAdvisor,
            'propertyVisitOrganizer'=>$propertyVisitOrganizer,
        ]);
    }

    public function meterDetails($id){
        return view('dashboard.meterdetails');
    }

    public function create_contract(){
        $amenities = DB::table('amenities')->get();
        $PropertyManagers = DB::table('users')->where('user_role', self::Property_Manager)->get();
        $PropertyDescriptionExperts = DB::table('users')->where('user_role', self::Property_Description_Experts)->get();
        $LegalAdvisors = DB::table('users')->where('user_role', self::Legal_Advisor)->get();
        $VisitOrganizers = DB::table('users')->where('user_role', self::Visit_Organizer)->get();
        return view('create-contract', compact('PropertyManagers','PropertyDescriptionExperts','LegalAdvisors','VisitOrganizers','amenities')); 
    }

    public function listBookingRequests(){
        return view('dashboard.listbookingrequests');
    }

    public function Contract_list(){
        return view('dashboard.Contract_list');
    }

    public function contractDetails($id){
        return view('dashboard.contractdetails');
    } 
    public function tenantDetails($id){
        return view('dashboard.tenantdetails');
    }
    public function give_permissions($id){
        return view('dashboard.manager.give-permissions');
    }
    public function unitManagment($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        return view('dashboard.unitmanagment')->with(['unit'=>$unit]);
    }
    public function terminate_contract($id){
        return view('tenant.terminate-contract');
    }

    public function membershipdetails(){
        $membership_data = DB::table('membership_payments')
            ->join('plans', 'membership_payments.plan_id', '=', 'plans.id')
            ->where('membership_payments.user_id', \Auth::user()->id)
            ->select('membership_payments.*', 'plans.*', 'membership_payments.status')
            ->get();
        return view('dashboard.membershipdetails')->with(['membership_data'=>$membership_data]);
    }

    public function managnentUnits(){
        return view('dashboard.managnent');
    }

    public function list(){
        $properties = DB::table('properties')->where('user_id', \Auth::user()->id)->get();
        return view('dashboard.listofproperties')->with(['properties'=>$properties]);
    }  
    public function managelist(){
        $propertyIds = null;
        $invitations = DB::table('invitations')->select('property_id')->groupBy('property_id')->where('email', \Auth::user()->email)->get();
        foreach ($invitations as $key => $value) {
            $propertyIds[] = $value->property_id;
        }
        $properties = DB::table('properties')->whereIn('id', $propertyIds)->get();
        return view('dashboard.manager.listofproperties')->with(['properties'=>$properties]);
    }
    public function my_contract_list(Request $request)
    {
        return view('dashboard.my-contract-list');
    }

    public function editUnit($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        //$property = DB::table('properties')->where('id', $unit->property_id)->first();
        $PropertyManagers = DB::table('users')->where('user_role', self::Property_Manager)->get();
        $PropertyDescriptionExperts = DB::table('users')->where('user_role', self::Property_Description_Experts)->get();
        $LegalAdvisors = DB::table('users')->where('user_role', self::Legal_Advisor)->get();
        $VisitOrganizers = DB::table('users')->where('user_role', self::Visit_Organizer)->get();
        $amenities = DB::table('amenities')->get();
        
        $unitPropertyManager = DB::table('users')->where('id', $unit->property_manager_id)->first();
        $unitPropertyDescriptionExpert = DB::table('users')->where('id', $unit->property_description_experts_id)->first();
        $unitLegalAdvisor = DB::table('users')->where('id', $unit->property_legal_advisor_id)->first();
        $unitVisitOrganizer = DB::table('users')->where('id', $unit->property_visit_organizer_id)->first();
        $properties = DB::table('properties')->where('user_id', \Auth::user()->id)->get();
        return view('dashboard.editunit')->with([
            'unit'=>$unit,
            //'property'=>$property,
            'properties'=>$properties,
            'PropertyManagers'=> $PropertyManagers, 
            'PropertyDescriptionExperts'=> $PropertyDescriptionExperts,
            'LegalAdvisors' => $LegalAdvisors,
            'VisitOrganizers' => $VisitOrganizers,
            'amenities' => $amenities,
            'unitPropertyManager' => $unitPropertyManager,
            'unitPropertyDescriptionExpert' => $unitPropertyDescriptionExpert,
            'unitLegalAdvisor' => $unitLegalAdvisor,
            'unitVisitOrganizer' => $unitVisitOrganizer,
        ]);
    }


    public function view($id){
        $data = Properties::find($id);
        if($data){
            $images = null;
            if($data->images) {
                $images = json_decode($data->images, true);
            }
            return view('viewproperty')->with(['data'=>$data,'images'=> $images]);
        } else {
            return abort(404);
        }       
    }

    public function listTenants($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        return view('dashboard.listtenants')->with(['unit'=>$unit]);
    }

    public function managelistUnit(){
        $invitations = DB::table('invitations')
                        ->select(['property_id','property_unit_id'])
                        ->groupBy(['property_id','property_unit_id'])
                        ->where('email', \Auth::user()->email)
                        ->get();
        foreach ($invitations as $key => $value) {
            $propertyIds[] = $value->property_id;
            $propertyUnitIds[] = $value->property_unit_id;
        }
        $assignedUnits = DB::table('properties')
            ->join('property_units', 'properties.id', '=', 'property_units.property_id')
            ->whereIn('property_units.id', $propertyUnitIds)
            ->select('property_units.*','properties.title','property_units.id')
            ->get();
        $createdUnits = DB::table('properties')
            ->join('property_units', 'properties.id', '=', 'property_units.property_id')
            ->where('property_units.created_user_id', \Auth::user()->id)
            ->select('property_units.*','properties.title','property_units.id')
            ->get();
        $properties = DB::table('properties')->whereIn('id', $propertyIds)->get();
        return view('dashboard.manager.listunits')->with(['properties'=>$properties, 'assignedUnits'=>$assignedUnits,'createdUnits'=>$createdUnits]);
    }

    public function listAllContracts(){
        return view('dashboard.listallcontacts');
    }
    public function listAllTenants(){
        return view('dashboard.listalltenants');
    }
    public function listMeters($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        //$property = DB::table('properties')->where('id', $unit->property_id)->first();
        // $units = DB::table('properties')
        //     ->join('property_units', 'properties.id', '=', 'property_units.property_id')
        //     ->where('properties.user_id', \Auth::user()->id)
        //     ->select('property_units.*','properties.unit_name')
        //     ->get();
        // $meters = DB::table('meters')
        //         ->join('property_units', 'property_units.id', '=', 'meters.property_unit_id')
        //         ->join('properties', 'properties.id', '=', 'property_units.property_id')
        //         //->where('properties.user_id', \Auth::user()->id)
        //         ->where('meters.property_unit_id', $id)
        //         ->select('property_units.*','properties.unit_name','meters.*','meters.id')
        //         ->get();
        // $properties = DB::table('properties')->where('user_id', \Auth::user()->id)->get();
        return view('dashboard.listmeters')->with(['unit'=>$unit]);
    }

    public function listContracts($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        $property = DB::table('properties')->where('id', $unit->property_id)->first();
        $units = DB::table('properties')
            ->join('property_units', 'properties.id', '=', 'property_units.property_id')
            ->where('properties.user_id', \Auth::user()->id)
            ->select('property_units.*','properties.title')
            ->get();
        $contracts = DB::table('contracts')
                ->join('property_units', 'property_units.id', '=', 'contracts.property_unit_id')
                ->join('properties', 'properties.id', '=', 'property_units.property_id')
                ->join('users', 'users.id', '=', 'contracts.tenent_id')
                //->where('properties.user_id', \Auth::user()->id)
                ->where('contracts.property_unit_id',$id)
                ->select('property_units.*','properties.title','contracts.*','users.name','contracts.id')
                ->get();
        // $contracts = DB::table('contracts')
        //         ->join('property_units', 'property_units.id', '=', 'contracts.property_unit_id')
        //         ->join('properties', 'properties.id', '=', 'property_units.property_id')
        //         ->where('properties.user_id', \Auth::user()->id)
        //         ->select('property_units.*','properties.title','contracts.*')
        //         ->get();
        //$properties = DB::table('properties')->where('user_id', \Auth::user()->id)->get(); 
        $tenents = DB::table('users')->where('user_role', 1)->get();
        return view('dashboard.listcontracts')->with(['unit'=>$unit,'tenents'=>$tenents,'property'=>$property, 'contracts'=>$contracts, 'units'=>$units]);
    }

    public function listGuarantors($id){
        $unit = DB::table('property_units')->where('id', $id)->first();
        $property = DB::table('properties')->where('id', $unit->property_id)->first();
        $invitations = DB::table('invitations')->where([['user_id', \Auth::user()->id],['property_unit_id',$id]])->get(); 
        return view('dashboard.listguarantors')->with(['unit'=>$unit,'property'=>$property, 'invitations'=>$invitations]); 
    }

    // public function createUnit(Request $request){
    //     $request->validate([
    //         'property_id' => ['required'],
    //         'unit_name' => ['required'],
    //         'rent' => ['required','numeric'],
    //         'deposit' => ['required','numeric'],
    //     ]);
    //     $propertiesUnit = new PropertiesUnit;
    //     $propertiesUnit->property_id = $request->input('property_id');
    //     $propertiesUnit->unit_name = $request->input('unit_name');
    //     $propertiesUnit->rent = $request->input('rent');
    //     $propertiesUnit->deposit = $request->input('deposit');
    //     $propertiesUnit->created_user_id = \Auth::user()->id;
    //     if($request->input('property_manager_id') == ''){
    //         $propertiesUnit->property_manager_id = \Auth::user()->id;
    //     } else {
    //        $propertiesUnit->property_manager_id = $request->input('property_manager_id');
    //     }
    //     if($request->input('property_description_experts_id') == ''){
    //         $propertiesUnit->property_description_experts_id = \Auth::user()->id;
    //     } else {
    //        $propertiesUnit->property_description_experts_id = $request->input('property_description_experts_id');
    //     }
    //     if($request->input('property_legal_advisor_id') == ''){
    //         $propertiesUnit->property_legal_advisor_id = \Auth::user()->id;
    //     } else {
    //        $propertiesUnit->property_legal_advisor_id = $request->input('property_legal_advisor_id');
    //     }
    //     if($request->input('property_visit_organizer_id') == ''){
    //         $propertiesUnit->property_visit_organizer_id = \Auth::user()->id;
    //     } else {
    //         $propertiesUnit->property_visit_organizer_id = $request->input('property_visit_organizer_id');
    //     }
    //     if($request->input('amenities') != ''){
    //         $propertiesUnit->amenities = implode(",",$request->input('amenities'));
    //     }
    //     $propertiesUnit->save();
    //     $this->sendMail([
    //         "Property Manager" => $propertiesUnit->property_manager_id, 
    //         "Property Description Experts" =>$propertiesUnit->property_description_experts_id, 
    //         "Property Legal Advisor" => $propertiesUnit->property_legal_advisor_id,  
    //         "Property Visit Organizer" => $propertiesUnit->property_visit_organizer_id
    //     ]);
    //     return redirect()->back()->with('message', 'Unit Created Successfully!');
    // }

    public function createMeter(Request $request){
        // echo "<pre>";
        // print_r($request->all());die;
        $request->validate([
            'property_id' => ['required'],
            'property_unit_id' => ['required'],
            'meter_type' => ['required'],
            'unit_price' => ['required','numeric'],
            'ean_number' => ['required'],
            'meter_number' => ['required'],
            'meter_doc' => ['required','max:10000'],
            'date_of_reading' => ['required'],
            'reading_value' => ['required','numeric'],
        ]);
        $MeterObj = new Meters;
        $MeterObj->property_id = $request->input('property_id');
        $MeterObj->property_unit_id = $request->input('property_unit_id');
        $MeterObj->meter_type = $request->input('meter_type');
        $MeterObj->unit_price = $request->input('unit_price');
        $MeterObj->ean_number = $request->input('ean_number');
        $MeterObj->meter_number = $request->input('meter_number');
        if($request->hasFile('meter_doc')) {   
            $file = $request->file('meter_doc');      
            $file_name = time().'.'.$file->getClientOriginalExtension();
            $file->move(public_path('/meter_doc'), $file_name);
            $MeterObj->document_file = $file_name;
        }
        $MeterObj->date_of_reading = $request->input('date_of_reading');
        $MeterObj->reading_value = $request->input('reading_value');
        $MeterObj->save();
        return redirect()->back()->with('message', 'Meter Added Successfully!');
    }

    public function createContract(Request $request){
        $request->validate([
            'property_id' => ['required'],
            'property_unit_id' => ['required'],
            'contract_type' => ['required'],
            'tenent_id' => ['required'],
            'starting_date' => ['required'],
            'end_date' => ['required']
        ]);
        $contract = new Contracts;
        $contract->property_id = $request->input('property_id');
        $contract->property_unit_id = $request->input('property_unit_id');
        $contract->tenent_id = $request->input('tenent_id');
        $contract->contract_type = $request->input('contract_type');
        $contract->starting_date = $request->input('starting_date');
        $contract->end_date = $request->input('end_date');
        $contract->save();
        return redirect()->back()->with('message', 'Contract Created Successfully!');
    }


    

    public function delete($id){
        $property = new Properties;
        $property->find($id)->delete();
        Meters::where('property_id', $id)->delete();
        return redirect()->back()->with('message', 'Delete Successfully!');
    } 

    public function deleteUnit($id){
        $propertiesUnit = new PropertiesUnit;
        $propertiesUnit->find($id)->delete();
        return redirect()->back()->with('message', 'Unit Delete Successfully!');
    }

    public function deleteMeter($id){
        $meters = new Meters;
        $meters->find($id)->delete();
        return redirect()->back()->with('message', 'Meter Delete Successfully!');
    }

    public function deleteContract($id){
        $contract = new Contracts;
        $contract->find($id)->delete();
        return redirect()->back()->with('message', 'Meter Delete Successfully!');
    }

    public function updateUnit(Request $request){
        $this->validate($request, [
            'unit_id' => 'required',
            'property_id' => 'required',
            'unit_name' => 'required',
            'rent' => 'required|numeric',
            'deposit' => 'required|numeric',
        ]);
        $propertiesUnit = PropertiesUnit::find($request->input('unit_id'));
        $propertiesUnit->property_id = $request->input('property_id');
        $propertiesUnit->unit_name = $request->input('unit_name');
        $propertiesUnit->rent = $request->input('rent');
        $propertiesUnit->deposit = $request->input('deposit');
        if($request->input('property_manager_id') == ''){
            $propertiesUnit->property_manager_id = \Auth::user()->id;
        } else {
           $propertiesUnit->property_manager_id = $request->input('property_manager_id');
        }
        if($request->input('property_description_experts_id') == ''){
            $propertiesUnit->property_description_experts_id = \Auth::user()->id;
        } else {
           $propertiesUnit->property_description_experts_id = $request->input('property_description_experts_id');
        }
        if($request->input('property_legal_advisor_id') == ''){
            $propertiesUnit->property_legal_advisor_id = \Auth::user()->id;
        } else {
           $propertiesUnit->property_legal_advisor_id = $request->input('property_legal_advisor_id');
        }
        if($request->input('property_visit_organizer_id') == ''){
            $propertiesUnit->property_visit_organizer_id = \Auth::user()->id;
        } else {
           $propertiesUnit->property_visit_organizer_id = $request->input('property_visit_organizer_id');
        }
        if($request->input('amenities') != ''){
            $propertiesUnit->amenities = implode(",",$request->input('amenities'));
        }
        $propertiesUnit->save();
        return redirect()->back()->with('message', 'Update Successfully!');
    }

    public function updateMeter(Request $request){
       $this->validate($request, [
            'meter_id' => 'required',
            'property_id' => 'required',
            'property_unit_id' => 'required',
            'meter_type' => 'required',
            'unit_price' => 'required|numeric',
            'ean_number' => 'required',
            'meter_number' => ['required'],
            //'meter_doc' => ['required','max:10000'],
            'date_of_reading' => ['required'],
            'reading_value' => ['required','numeric'],
        ]);
        $meter = Meters::find($request->input('meter_id'));
        //$plan->id = $request->input('unit_id');
        $meter->property_id = $request->input('property_id');
        $meter->property_unit_id = $request->input('property_unit_id');
        $meter->meter_type = $request->input('meter_type');
        $meter->unit_price = $request->input('unit_price');
        $meter->ean_number = $request->input('ean_number');
        $meter->meter_number = $request->input('meter_number');
        if($request->hasFile('meter_doc')) {   
            $file = $request->file('meter_doc');      
            $file_name = time().'.'.$file->getClientOriginalExtension();
            $file->move(public_path('/meter_doc'), $file_name);
            $meter->document_file = $file_name;
        }
        $meter->date_of_reading = $request->input('date_of_reading');
        $meter->reading_value = $request->input('reading_value');
        $meter->save();
        return redirect()->back()->with('message', 'Update Successfully!');
    }

    public function updateContract(Request $request){
        die('dsad');
    }

    public function sendMail($ids){
        foreach ($ids as $as => $id) {
            $user = DB::table('users')->where('id', $id)->first();
            $to_name = $user->name." ".$user->last_name;
            $to_email = $user->email;
            $data = array('name'=>$to_name, "email" => $to_email,"as" => $as);
                
            Mail::send('emails.invitation', $data, function($message) use ($to_name, $to_email) {
                $message->to($to_email, $to_name)
                        ->subject('Invitations from Reasy Properties');
                $message->from('malkeetvisionvivante@gmail.com','Reasy Property');
            });
        }
        return true;
    }
    public function dragdrop(Request $request)
    {

        $files = $request->file('file');
        // echo "<pre>";
        // print_r($files);die;
        if($request->hasFile('file')){
            $destinationPath = public_path('images/property_images');
            $fileName = str_replace(" ", "_", time()."_".$files->getClientOriginalName()) ;
            $files->move($destinationPath,$fileName);
            return response()->json(['status' => 'success', 'target_file' => $fileName]);
        }
    }

    public function View_Unit(request $request, $id)
    {
        $unit = DB::table('property_units')->where('id', $id)->first();
        $property = DB::table('properties')->where('id', $unit->property_id)->first();
        $PropertyManagers = DB::table('users')->where('user_role', self::Property_Manager)->get();
        $PropertyDescriptionExperts = DB::table('users')->where('user_role', self::Property_Description_Experts)->get();
        $LegalAdvisors = DB::table('users')->where('user_role', self::Legal_Advisor)->get();
        $VisitOrganizers = DB::table('users')->where('user_role', self::Visit_Organizer)->get();
        $amenities = DB::table('amenities')->get();
        
        $unitPropertyManager = DB::table('users')->where('id', $unit->property_manager_id)->first();
        $unitPropertyDescriptionExpert = DB::table('users')->where('id', $unit->property_description_experts_id)->first();
        $unitLegalAdvisor = DB::table('users')->where('id', $unit->property_legal_advisor_id)->first();
        $unitVisitOrganizer = DB::table('users')->where('id', $unit->property_visit_organizer_id)->first();
        return view('dashboard.view-unit')->with([
            'unit'=>$unit,
            'property'=>$property,
            'PropertyManagers'=> $PropertyManagers, 
            'PropertyDescriptionExperts'=> $PropertyDescriptionExperts,
            'LegalAdvisors' => $LegalAdvisors,
            'VisitOrganizers' => $VisitOrganizers,
            'amenities' => $amenities,
            'unitPropertyManager' => $unitPropertyManager,
            'unitPropertyDescriptionExpert' => $unitPropertyDescriptionExpert,
            'unitLegalAdvisor' => $unitLegalAdvisor,
            'unitVisitOrganizer' => $unitVisitOrganizer,
        ]);
    }
}