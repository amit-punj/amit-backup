<?php

namespace App\Http\Controllers;
use App\Http\Requests;
use Illuminate\Http\Request;
use Validator;
use URL;
use Session;
use Redirect;
use App\User;
use PayPal\Rest\ApiContext;
use PayPal\Auth\OAuthTokenCredential;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\RedirectUrls;
use PayPal\Api\ExecutePayment;
use PayPal\Api\PaymentExecution;
use PayPal\Api\Transaction;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Hash;
use App\MembershipPayments;
use Illuminate\Support\Facades\DB;
use App\Plans;
use Auth;
use Carbon\Carbon;
Use Helper;
use App\Booking;
use App\Transactions;
use App\PropertiesUnit;
use Mail;
use Paypalpayment;
use App\Guarantor;

class PaymentController extends HomeController
{
    private $_api_context;
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        //parent::__construct();
        
        /** setup PayPal api context **/
        $paypal_conf = \Config::get('paypal');
        $this->_api_context = new ApiContext(new OAuthTokenCredential($paypal_conf['client_id'], $paypal_conf['secret']));
        $this->_api_context->setConfig($paypal_conf['settings']);
    }
    /**
     * Show the application paywith paypalpage.
     *
     * @return \Illuminate\Http\Response
     */
    public function payWithPaypal()
    {
        return view('paywithpaypal');
    }
    /**
     * Store a details of payment with paypal.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function postPaymentWithpaypal(Request $request) {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
            'plan_id' => ['required'],
        ]); 

        $plan_id = $request->get('plan_id');
        $plan = Plans::find($plan_id);
        if(!$plan->price){
            return back();
        } else {
            $price = $plan->price;
        }

        $info = [   
            'name'=>$request->get('name'),
            'last_name'=>$request->get('last_name'),
            'email'=>$request->get('email'),
            'password'=>$request->get('password'),
            'plan_id'=>$request->get('plan_id')
        ];
        $request->session()->put('userinfo', $info);

        $payer = new Payer();
        $payer->setPaymentMethod('paypal');

        $item_1 = new Item();
        $item_1->setName('Item 1') ->setCurrency('USD') ->setQuantity(1) ->setPrice($price); 

        $item_list = new ItemList();
        $item_list->setItems(array($item_1));

        $amount = new Amount();
        $amount->setCurrency('USD') ->setTotal($price);

        $transaction = new Transaction();
        $transaction->setAmount($amount) ->setItemList($item_list) ->setDescription('Your transaction description');

        $redirect_urls = new RedirectUrls();
        $redirect_urls->setReturnUrl(URL::route('payment.status')) ->setCancelUrl(URL::route('payment.status'));

        $payment = new Payment();
        $payment->setIntent('Sale')
            ->setPayer($payer)
            ->setRedirectUrls($redirect_urls)
            ->setTransactions(array($transaction));           
        try {
            $payment->create($this->_api_context);
        } catch (\PayPal\Exception\PPConnectionException $ex) {
            if (\Config::get('app.debug')) {
                \Session::put('error','Connection timeout');
                return redirect('/purchasemembership');
            } else {
                \Session::put('error','Some error occur, sorry for inconvenient');
                return redirect('/purchasemembership');
            }
        }
        foreach($payment->getLinks() as $link) {
            if($link->getRel() == 'approval_url') {
                $redirect_url = $link->getHref();
                break;
            }
        }

        Session::put('paypal_payment_id', $payment->getId());
        if(isset($redirect_url)) {
            return Redirect::away($redirect_url);
        }
        \Session::put('error','Unknown error occurred');
        return redirect('/purchasemembership');
    }
    public function getPaymentStatus(Request $request)
    {   
        $payment_id = Session::get('paypal_payment_id');
        Session::forget('paypal_payment_id');
        if (empty(Input::get('PayerID')) || empty(Input::get('token'))) {
            \Session::put('error','Payment failed');
            return redirect('/purchasemembership');
        }
        $payment = Payment::get($payment_id, $this->_api_context);
        $execution = new PaymentExecution();
        $execution->setPayerId(Input::get('PayerID'));
        $result = $payment->execute($execution, $this->_api_context);
        if ($result->getState() == 'approved') { 
            $userinfo = $request->session()->get('userinfo');
            User::create([
                'name' => $userinfo['name'],
                'last_name' => $userinfo['last_name'],
                'email' => $userinfo['email'],
                'user_role' => 2,
                'password' => Hash::make($userinfo['password']),
            ]);
            $request->session()->forget('userinfo');

            \Session::put('success','User create Succssfully');

            $transactions = $result->getTransactions();
            $currentTime = Carbon::now();
            $membership_end_at = null;
            //$createdUser = $user = User::where('email', $userinfo['email'])->first();
            $plan = Plans::find($userinfo['plan_id']);
            if($plan->time_period_type == 'monthly'){
                $TimeString = Carbon::parse($currentTime->toDateTimeString());
                $membership_end_at = $TimeString->addMonths($plan->time_period);
            } else if($plan->time_period_type == 'yearly'){
                $TimeString = Carbon::parse($currentTime->toDateTimeString());
                $membership_end_at = $TimeString->addYears($plan->time_period);
            }

            $MembershipPayment = new MembershipPayments;
            $MembershipPayment->user_id = DB::table('users')->where('email', $userinfo['email'])->value('id');
            $MembershipPayment->payment_email = $result->getPayer()->getPayerInfo()->getEmail();
            $MembershipPayment->status = $result->getState();
            $MembershipPayment->first_name = $result->getPayer()->getPayerInfo()->getFirstName();
            $MembershipPayment->last_name = $result->getPayer()->getPayerInfo()->getLastName();
            $MembershipPayment->payer_id = $result->getPayer()->getPayerInfo()->getPayerId();
            $MembershipPayment->total_amount = $transactions[0]->getAmount()->getTotal();
            $MembershipPayment->currency = $transactions[0]->getAmount()->getCurrency();
            //$MembershipPayment->payment_time = $result->getCreateTime();
            $MembershipPayment->payment_time = $currentTime->toDateTimeString();
            $MembershipPayment->plan_id = $userinfo['plan_id'];
            $MembershipPayment->membership_end_at = $membership_end_at;
            $MembershipPayment->save();

            Auth::logout();
            return redirect('/login');
            // echo $time = $result->getCreateTime();
            // echo $email = $result->getPayer()->getPayerInfo()->getEmail();
            // echo $first_name = $result->getPayer()->getPayerInfo()->getFirstName();
            // echo $last_name = $result->getPayer()->getPayerInfo()->getLastName();
            // echo $payer_id = $result->getPayer()->getPayerInfo()->getPayerId();
            //  $transactions = $result->getTransactions();
            // echo $totalAmount = $transactions[0]->getAmount()->getTotal();
            // echo $currency = $transactions[0]->getAmount()->getCurrency();
            // die('dd');



            \Session::put('success','Payment success');
            return redirect('/purchasemembership');
        }
        \Session::put('error','Payment failed');
        return redirect('/purchasemembership');
    }

    public function postUpgradeMembership(Request $request) {
        $plan_id = $request->get('plan_id');
        $plan = Plans::find($plan_id);
        if(!$plan->price){
            return back();
        } else {
            $price = $plan->price;
        }
        
        $info = ['plan_id'=>$request->get('plan_id')];
        $request->session()->put('userinfo', $info);




        $payer = new Payer();
        $payer->setPaymentMethod('paypal');

        $item_1 = new Item();
        $item_1->setName('Item 1') ->setCurrency('USD') ->setQuantity(1) ->setPrice($price); 

        $item_list = new ItemList();
        $item_list->setItems(array($item_1));

        $amount = new Amount();
        $amount->setCurrency('USD') ->setTotal($price);

        $transaction = new Transaction();
        $transaction->setAmount($amount) ->setItemList($item_list) ->setDescription('Your transaction description');

        $redirect_urls = new RedirectUrls();
        $redirect_urls->setReturnUrl(URL::route('upgrade.status')) ->setCancelUrl(URL::route('upgrade.status'));

        $payment = new Payment();
        $payment->setIntent('Sale')
            ->setPayer($payer)
            ->setRedirectUrls($redirect_urls)
            ->setTransactions(array($transaction));           
        try {
            $payment->create($this->_api_context);
        } catch (\PayPal\Exception\PPConnectionException $ex) {
            if (\Config::get('app.debug')) {
                \Session::put('error','Connection timeout');
                return redirect('/list-of-properties');
            } else {
                \Session::put('error','Some error occur, sorry for inconvenient');
                return redirect('/list-of-properties');
            }
        }
        foreach($payment->getLinks() as $link) {
            if($link->getRel() == 'approval_url') {
                $redirect_url = $link->getHref();
                break;
            }
        }

        Session::put('paypal_payment_id', $payment->getId());
        if(isset($redirect_url)) {
            return Redirect::away($redirect_url);
        }
        \Session::put('error','Unknown error occurred');
        return redirect('/list-of-properties');
    }

    public function getUpgradetStatus(Request $request){
        $payment_id = Session::get('paypal_payment_id');
        Session::forget('paypal_payment_id');
        if (empty(Input::get('PayerID')) || empty(Input::get('token'))) {
            \Session::put('error','Payment failed');
            return redirect('/purchasemembership');
        }
        $payment = Payment::get($payment_id, $this->_api_context);
        $execution = new PaymentExecution();
        $execution->setPayerId(Input::get('PayerID'));
        $result = $payment->execute($execution, $this->_api_context);
        if ($result->getState() == 'approved') { 
            $userinfo = $request->session()->get('userinfo');
            $transactions = $result->getTransactions();
            $currentTime = Carbon::now();
            $membership_end_at = null;
            //$createdUser = $user = User::where('email', $userinfo['email'])->first();
            $plan = Plans::find($userinfo['plan_id']);
            if($plan->time_period_type == 'monthly'){
                $TimeString = Carbon::parse($currentTime->toDateTimeString());
                $membership_end_at = $TimeString->addMonths($plan->time_period);
            } else if($plan->time_period_type == 'yearly'){
                $TimeString = Carbon::parse($currentTime->toDateTimeString());
                $membership_end_at = $TimeString->addYears($plan->time_period);
            }
            $MembershipPayment = new MembershipPayments;
            $MembershipPayment->user_id = Auth::id();
            $MembershipPayment->payment_email = $result->getPayer()->getPayerInfo()->getEmail();
            $MembershipPayment->status = $result->getState();
            $MembershipPayment->first_name = $result->getPayer()->getPayerInfo()->getFirstName();
            $MembershipPayment->last_name = $result->getPayer()->getPayerInfo()->getLastName();
            $MembershipPayment->payer_id = $result->getPayer()->getPayerInfo()->getPayerId();
            $MembershipPayment->total_amount = $transactions[0]->getAmount()->getTotal();
            $MembershipPayment->currency = $transactions[0]->getAmount()->getCurrency();
            //$MembershipPayment->payment_time = $result->getCreateTime();
            $MembershipPayment->payment_time = $currentTime->toDateTimeString();
            $MembershipPayment->plan_id = $userinfo['plan_id'];
            $MembershipPayment->membership_end_at = $membership_end_at;
            $MembershipPayment->save();
            return redirect('/list-of-properties');
        } else {
            return redirect('/list-of-properties');
        }
    }

    public function PropertyPayment(Request $request) {
        if($request->isMethod('post'))
        {
            $postData = Input::all();
            // helper::pr($postData);
            // die('ffffffffffffff');
            $booking = booking::where(['unit_id' => $postData['unit_id'], 'tenant_id' => $postData['tenant_id']])->first()->toArray();
            $unit = PropertiesUnit::find($postData['unit_id'])->toArray();
            $price = $unit['rent'] + $unit['cost_provision'] + $unit['tax'] + $unit['fix_price'] + $unit['deposit'];
            $name  = $unit['unit_name'];
            $description  = $unit['description'];
            if(isset($postData['paypal']) && $postData['paypal'] == 'paypal')
            {
                $info = [   
                    'name'=> $name,
                    'price'=> $price,
                    'description'=> $description,
                    'unit_id'=> $postData['unit_id'],
                    'tenant_id'=> $postData['tenant_id'],
                    "booking_id"    => $booking['id'],
                ];
                $request->session()->put('info', $info);

                $payer = new Payer();
                $payer->setPaymentMethod('paypal');

                $item_1 = new Item();
                $item_1->setName($name) ->setCurrency('USD') ->setQuantity(1) ->setPrice($price); 

                $item_list = new ItemList();
                $item_list->setItems(array($item_1));

                $amount = new Amount();
                $amount->setCurrency('USD') ->setTotal($price);

                $transaction = new Transaction();
                $transaction->setAmount($amount) ->setItemList($item_list) ->setDescription($description);

                $redirect_urls = new RedirectUrls();
                $redirect_urls->setReturnUrl(URL::route('property-payment.status')) ->setCancelUrl(URL::route('property-payment.status'));

                $payment = new Payment();
                $payment->setIntent('Sale')
                    ->setPayer($payer)
                    ->setRedirectUrls($redirect_urls)
                    ->setTransactions(array($transaction));           
                try {
                    $payment->create($this->_api_context);
                } catch (\PayPal\Exception\PPConnectionException $ex) {
                    if (\Config::get('app.debug')) {
                        toastr()->error('Connection timeout!');
                        return redirect('/book-property/'.$postData['unit_id']);
                    } else {
                        toastr()->error('Some error occur, sorry for inconvenient!');
                        return redirect('/book-property/'.$postData["unit_id"]);
                    }
                }
                foreach($payment->getLinks() as $link) {
                    if($link->getRel() == 'approval_url') {
                        $redirect_url = $link->getHref();
                        break;
                    }
                }

                Session::put('paypal_payment_id', $payment->getId());
                if(isset($redirect_url)) {
                    return Redirect::away($redirect_url);
                }
                toastr()->error('Unknown error occurred!');
                return redirect('/book-property/'.$postData["unit_id"]);
            }
    //         if(isset($postData['credit']) && $postData['credit'] == 'card')
    //         {
	   //          // helper::pr($postData);
	   //          // die('credit');
	   //          $payer = new Payer();
				// $payer->setPaymentMethod("paypal");

				// $item1 = new Item();
				// $item1->setName('Ground Coffee 40 oz')
				//     ->setCurrency('USD')
				//     ->setQuantity(1)
				//     ->setPrice(7.5);
				// $item2 = new Item();
				// $item2->setName('Granola bars')
				//     ->setCurrency('USD')
				//     ->setQuantity(5)
				//     ->setPrice(2);

				// $itemList = new ItemList();
				// $itemList->setItems(array($item1, $item2));

				// $details = new Details();
				// $details->setShipping(1.2)
				//     ->setTax(1.3)
				//     ->setSubtotal(17.50);

				// $amount = new Amount();
				// $amount->setCurrency("USD")
				//     ->setTotal(20)
				//     ->setDetails($details);

				// $transaction = new Transaction();
				// $transaction->setAmount($amount)
				//     ->setItemList($itemList)
				//     ->setDescription("Payment description")
				//     ->setInvoiceNumber(uniqid());

				// // $baseUrl = getBaseUrl();
				// $redirectUrls = new RedirectUrls();
				// $redirectUrls->setReturnUrl(URL::route('property-payment.status')) ->setCancelUrl(URL::route('property-payment.status'));

				// $payment = new Payment();
				// $payment->setIntent("authorize")
				//     ->setPayer($payer)
				//     ->setRedirectUrls($redirectUrls)
				//     ->setTransactions(array($transaction));

				// $request = clone $payment;

				// try {
				//     $payment->create($this->_api_context);
				//  //    helper::pr($payment);
				// 	// die('payment');
				// } catch (Exception $ex) {
				// 	ResultPrinter::printError("Created Payment Authorization Using PayPal. Please visit the URL to Authorize.", "Payment", null, $request, $ex);
				//     exit(1);
				// }

				// $approvalUrl = $payment->getApprovalLink();
				// helper::pr($approvalUrl);
				// // die('approvel');
				// // return redirect($approvalUrl);
				// helper::pr("Created Payment Authorization Using PayPal. Please visit the URL to Authorize.", "Payment", "<a href='$approvalUrl' >$approvalUrl</a>", $request, $payment);
				// return $payment;

    //         }
            // elseif(isset($postData['bank']) && $postData['bank'] == 'bank')
            else
            {
                $where_data = array('unit_id' => $postData['unit_id'], 'tenant_id' => $postData['tenant_id']);
                $booking_data = array(
                    'step' =>5, 
                    'status' => '0',
                    'payment_method' => 'bank',
                    'payment_status' => 'pending',
                );
                $booking_update = Booking::where($where_data)->update($booking_data);
                $unit_update = PropertiesUnit::where(['id' => $postData['unit_id']])->update(['booking_status' => 1]);
                $pm_id = $unit['property_manager_id'];
                $pm_details = User::find($pm_id)->toArray();
                $pm_name      = $pm_details['name'];
                $pm_email     = trim($pm_details['email']);
                $tenant_details = User::find($postData['tenant_id'])->toArray();
                
                $pm_data = array(
                    'name'      => $pm_details['name'],
                    "email"     => $pm_details['email'],
                    "unit_name"     => $unit['unit_name'],
                    "description"   => $unit['description'],
                    "price"         => $unit['rent'] + $unit['cost_provision'] + $unit['tax'] + $unit['fix_price'] + $unit['deposit'],
                    "tenant_name"   => $tenant_details['name'],
                    "booking_id"    => $booking['id'],
                );
                    
                Mail::send('emails.unit_booking_to_pm', $pm_data, function($message) use ($pm_name, $pm_email) {
                    $message->to($pm_email, $pm_name)
                            ->subject('Property Booking');
                    $message->from('amitpunjvision@gmail.com','Reasy Property');
                });

                if($booking['guarantor_id'] != 0 && !is_null($booking['guarantor_id']) )
                {
                    $guarantor = Guarantor::find($booking['guarantor_id'])->toArray();
                    $guarantor_name      = $guarantor['name'];
                    $guarantor_email     = trim($guarantor['email']);
                    $guarantor_data = array(
                        'name'      => $guarantor['name'],
                        "email"     => $guarantor['email'],
                        "unit_name"     => $unit['unit_name'],
                        "description"   => $unit['description'],
                        "price"         => $unit['rent'] + $unit['cost_provision'] + $unit['tax'] + $unit['fix_price'] + $unit['deposit'],
                        "tenant_name"   => $tenant_details['name'],
                        "booking_id"    => $booking['id'],
                        "guarantor_id"    => $booking['guarantor_id'],
                    );
                        
                    Mail::send('emails.guarantor_email', $guarantor_data, function($message) use ($guarantor_name, $guarantor_email) {
                        $message->to($guarantor_email, $guarantor_name)
                                ->subject('Guarantor Details');
                        $message->from('amitpunjvision@gmail.com','Reasy Property');
                    });
                }
                toastr()->success('Payment Done!');
                return redirect('/');
            }
        }
    }

    public function PropertyPaymentStatus(Request $request)
    {   
        $payment_id = Session::get('paypal_payment_id');
        $postData = Input::all();
        $info = $request->session()->get('info');
        Session::forget('paypal_payment_id');
        if (empty(Input::get('PayerID')) || empty(Input::get('token'))) {
            toastr()->error('Payment failed!');
            return redirect('/book-property/'.$info['unit_id']);
        }
        $payment = Payment::get($payment_id, $this->_api_context);
        $execution = new PaymentExecution();
        $execution->setPayerId(Input::get('PayerID'));
        $result = $payment->execute($execution, $this->_api_context);
        if ($result->getState() == 'approved') { 

            $transaction = new Transactions();
            $transaction->paypal_id = $postData['paymentId'];
            $transaction->paypal_PayerID = $postData['PayerID'];
            $transaction->paypal_status = 'paid';
            $transaction->related_to = 'Rent';
            // $transaction->description = 'Description';
            $transaction->amount = $info['price'];
            $transaction->payment_by = 'Paypal';
            $transaction->booking_id = $info['booking_id'];
            $transaction->save();
            $transaction_id = $transaction->id;

            $where_data = array('unit_id' => $info['unit_id'], 'tenant_id' => $info['tenant_id']);
            $booking_data = array(
                'step' =>5, 
                'transaction_id' => $transaction_id,
                'status' => '0',
                'payment_method' => 'paypal',
                'payment_status' => 'paid',
            );
            $booking_update = Booking::where($where_data)->update($booking_data);
            $unit_update = PropertiesUnit::where(['id' => $info['unit_id']])->update(['booking_status' => 1]);

            $unit = PropertiesUnit::where(['id' => $info['unit_id']])->first()->toArray();
            $pm_id = $unit['property_manager_id'];
            $pm_details = User::find($pm_id)->toArray();
            $pm_name      = $pm_details['name'];
            $pm_email     = trim($pm_details['email']);
            $tenant_details = User::find($info['tenant_id'])->toArray();
            
            $pm_data = array(
                'name'      => $pm_details['name'],
                "email"     => $pm_details['email'],
                "unit_name"     => $unit['unit_name'],
                "description"   => $unit['description'],
                "price"         => $info['price'],
                "tenant_name"   => $tenant_details['name'],
                "booking_id"    => $info['booking_id'],
            );
                
            Mail::send('emails.unit_booking_to_pm', $pm_data, function($message) use ($pm_name, $pm_email) {
                $message->to($pm_email, $pm_name)
                        ->subject('Property Booking');
                $message->from('amitpunjvision@gmail.com','Reasy Property');
            });
            $booking = booking::where($where_data)->first()->toArray();
            if($booking['guarantor_id'] != 0 && !is_null($booking['guarantor_id']) )
            {
                $guarantor = Guarantor::find($booking['guarantor_id'])->toArray();
                $guarantor_name      = $guarantor['name'];
                $guarantor_email     = trim($guarantor['email']);
                $guarantor_data = array(
                    'name'      => $guarantor['name'],
                    "email"     => $guarantor['email'],
                    "unit_name"     => $unit['unit_name'],
                    "description"   => $unit['description'],
                    "price"         => $info['price'];,
                    "tenant_name"   => $tenant_details['name'],
                    "booking_id"    => $booking['id'],
                    "guarantor_id"    => $booking['guarantor_id'],
                );
                    
                Mail::send('emails.guarantor_email', $guarantor_data, function($message) use ($guarantor_name, $guarantor_email) {
                    $message->to($guarantor_email, $guarantor_name)
                            ->subject('Guarantor Details');
                    $message->from('amitpunjvision@gmail.com','Reasy Property');
                });

            }

            toastr()->success('Payment Done!');
            return redirect('/');
        }
        else
        {
            toastr()->error('Payment failed!');
            return redirect('/book-property/'.$info['unit_id']);
        }
    }


  }